import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from PIL import Image
import os
import webbrowser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞—Ç—Ä–∞—Ç –Ω–∞ Premium Cars", layout="wide", page_icon="  ")

car_images = {
    "Lamborghini Revuelto": r"D:\1\orig-removebg-preview.png",
    "Lamborghini Huracan Tecnica": r"D:\1\unnamed-removebg-preview.png",
    "Lamborghini Urus": r"D:\1\lamborghini-urus-yellow-e1569794314548-removebg-preview.png",
    "Lamborghini Huracan Sterrato": r"D:\1\lamborghini-huracan-sterrato-6-removebg-preview.png",
    "Mclaren Artura": r"D:\1\2023_McLaren_Artura_4-removebg-preview.png",
    "Mclaren P1": r"D:\1\Vclarenp1-removebg-preview.png",
    "Mclaren 720s": r"D:\1\–ú–∞–∫–ª–∞—Ä–µ–Ω-720–°-—á–µ—Ä–Ω—ã–π-—Ü–≤–µ—Ç-removebg-preview.png",
    "Ferrari SF90": r"D:\1\ferrari_sf90__554581082f-removebg-preview.png",
    "Ferrari Daytona": r"D:\1\Ferrari_Daytona_SP3_front_side_at_CF_2022-removebg-preview.png",
    "Ferrari Roma": r"D:\1\ferrari_roma_1024955-removebg-preview.png",
    "Ferrari Purosange": r"D:\1\Purosange-removebg-preview.png",
    "Ferrari 812 Superfast": r"D:\1\uljvo0qtiw5ljuwyk1sg-removebg-preview.png",
    "Bentley Continental GT": r"D:\1\Bentley_Continental_GT__4th_gen.__IMG_0556-removebg-preview.png",
    "Aston Martin Vantage": r"D:\1\AM606_studio-removebg-preview.png",
    "Aston Martin DB 12": r"D:\1\db12-removebg-preview.png",
    "BMW M3CS": r"D:\1\m3cs-removebg-preview.png",
    "Rolls-Royce Spectre": r"D:\1\Spectre-removebg-preview.png",
    "Rolls-Royce Black Badge Wraith": r"D:\1\rolls-royce-black-badge-wraith-by-spofec-removebg-preview.png"
}
youtube_reviews = {"Lamborghini Revuelto": ["https://youtu.be/KBGJn0ogQuA?si=BWh4ACO-zyzyUW1H"],
                    "Lamborghini Huracan Tecnica": ["https://youtu.be/FjiF3wG5Oag?si=Mod_UeDY5U5xTaPt"],
                    "Lamborghini Urus": ["https://youtu.be/iG380_ycdgE?si=l7hLpobgImHg0knB"],
                    "Lamborghini Huracan Sterrato": ["https://youtube.com/shorts/a78E3tOFn68?si=oYUDRfqqRct2YlbN"],
                    "Mclaren Artura": ["https://youtu.be/8W1pZtujhwo?si=ZsGccQXzIePTH-_A"],
                    "Mclaren P1": ["https://youtu.be/q9HwQHHaeIM?si=vzD-PuLQUfFBo-kL"],
                    "Mclaren 720s": ["https://youtu.be/DnRUv-e09uU?si=QG2PaMaH8RCo1H93"],
                    "Ferrari SF90": ["https://youtu.be/g3_BkVJ_v9U?si=CiceKModKRjMe1Hh"],
                    "Ferrari Daytona": ["https://youtube.com/shorts/lzNtfBlQtA8?si=GMm3W9yQNzLm5jCb"],
                    "Ferrari Roma": ["https://youtu.be/JMdLlvpLw60?si=VO2k2fyhUrtCSufv"],
                    "Ferrari Purosange": ["https://youtu.be/hOKuqfIHin0?si=OrKbbowQ-8uRkbzX"],
                    "Ferrari 812 Superfast": ["https://youtube.com/shorts/tSbmRAgMr-8?si=pd41IGiJ06Krq9E-"],
                    "Bentley Continental GT": ["https://youtu.be/c5uiJCDCEOk?si=as0RcX7yzvSmboLs"],
                    "Aston Martin Vantage": ["https://youtu.be/DaqeBaK0-kk?si=NRSjb_fPZK1R1Hkw"],
                    "Aston Martin DB 12": ["https://youtu.be/rzK-VYf3VM8?si=QsQ2Ny0b9Cn8Gm8_"],
                    "BMW M3CS": ["https://youtu.be/Vc4cHeycVhg?si=Mf1W632yj6bkuNlh"],
                    "Rolls-Royce Spectre": ["https://youtu.be/eYiPRSzaJkg?si=P7VX1XukhT37m8pF"],
                    "Rolls-Royce Black Badge Wraith": ["https://youtu.be/-V3AgInFu2U?si=KrHB65FPMKUl7a51"]
                   }

car_model = st.sidebar.selectbox("–ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è", ["Lamborghini Revuelto", "Lamborghini Huracan Tecnica", "Lamborghini Urus", "Lamborghini Huracan Sterrato", "Mclaren Artura", "Mclaren P1", "Mclaren 720s",
"Ferrari SF90", "Ferrari Daytona", "Ferrari Roma", "Ferrari Purosange", "Ferrari 812 Superfast", "Bentley Continental GT", "Aston Martin Vantage", "Aston Martin DB 12", "BMW M3CS", "Rolls-Royce Spectre", "Rolls-Royce Black Badge Wraith"], index=0)
# –°—Ç–∏–ª–∏
st.markdown("""
<style>
    .stApp {
        background: linear-gradient(135deg, #000000, #3a3f44, #ffffff);
        min-height: 100vh;
        background-attachment: fixed;
        color: white;
    }
    label, .stTextInput label, .stPassword label {
        color: white !important;
    }
    input[type="text"], input[type="text"], input[type="password"], input[type="number"] {
        background-color: rgba(0,0,0,0.4);
        color: white !important;
        border: 1px solid #aaa;
        border-radius: 8px;
        padding: 8px;
    }
    input::placeholder {
        color: #cccccc;
    }
    section[data-testid="stSidebar"] {
        background: linear-gradient(180deg, #1e1e1e, #3c3c3c, #5a5a5a);
        color: white;
    }
    section[data-testid="stSidebar"] * {
        color: white !important;
    }
    .stButton>button {
        background: linear-gradient(90deg, #ff4b4b, #ff6f61);
        color: white;
        border-radius: 12px;
        padding: 12px 24px;
        font-weight: bold;
        border: none;
        transition: transform 0.2s, box-shadow 0.2s;
    }
    .stButton>button:hover {
        transform: scale(1.05);
        box-shadow: 0 4px 15px rgba(255, 75, 75, 0.5);
    }
    h1, h2, h3 {
        color: #ffffff;
        font-family: 'Arial Black', sans-serif;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);
    }
    </style>
    """, unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
if 'data' not in st.session_state:
    st.session_state.data = pd.DataFrame(columns=['–ú–æ–¥–µ–ª—å', '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)', '–†–∞—Å—Ö–æ–¥ (–ª/100–∫–º)', '–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ (–≥—Ä–Ω/–ª)', '–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã (–≥—Ä–Ω)'])
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False

def calculate_cost(distance, fuel_consumption, fuel_price):
    try:
        total_fuel = (distance / 100) * fuel_consumption
        total_cost = total_fuel * fuel_price
        return total_fuel, total_cost
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ: {e}")
        return None, None
    
def load_car_image(image_path):
    try:
        if os.path.exists(image_path):
            return Image.open(image_path)
        else:
            st.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {image_path}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ 'images'.")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
        return None

def login_page():
    st.markdown("<div class='main'>", unsafe_allow_html=True)
    st.title("üîê–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    st.markdown("–ü–æ–∂–∞–π–ª—É—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∞–π—Ç—É.")

    username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")

    if st.button("–í–æ–π—Ç–∏"):
        if username == "admin" and password == "heuytnij77":
            st.session_state.authenticated = True 
            st.success("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–ª–µ–Ω–∏–µ...")
            st.rerun()
        else:
            st.error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")

    st.markdown("</div>", unsafe_allow_html=True)

def main_page():
    st.markdown("<div class='main'>", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("   –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞—Ç—Ä–∞—Ç –Ω–∞ Premium Cars")
st.markdown("–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è –≤–∞—à–µ–≥–æ —Å—É–ø–µ—Ä–∫–∞—Ä–∞ –≤ –≥—Ä–∏–≤–Ω–∞—Ö –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å—Ç–∏–ª—å–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π!")

# –°–∞–π–¥–±–∞—Ä
st.sidebar.header("üîß –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")
distance = st.sidebar.slider("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)", min_value=0.0, max_value=1000.0, value=100.0, step=10.0)
fuel_consumption = st.sidebar.number_input("–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–ª/100–∫–º)", min_value=0.0, value=15.0, step=0.5)
fuel_price = st.sidebar.number_input("–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ (–≥—Ä–Ω/–ª)", min_value=0.0, value=50.0, step=1.0)

if st.sidebar.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å üöÄ"):
    total_fuel, total_cost = calculate_cost(distance, fuel_consumption, fuel_price)
    new_data = pd.DataFrame({
        '–ú–æ–¥–µ–ª—å': [car_model],
        '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)': [distance],
        '–†–∞—Å—Ö–æ–¥ (–ª/100–∫–º)': [fuel_consumption],
        '–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ (–≥—Ä–Ω/–ª)': [fuel_price],
        '–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã (–≥—Ä–Ω)': [total_cost]    
    })
    st.session_state.data = pd.concat([st.session_state.data, new_data], ignore_index=True)
    st.success(f"üèÅ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω! –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: {total_fuel:.2f} –ª, –ó–∞—Ç—Ä–∞—Ç—ã: {total_cost:.2f} –≥—Ä–Ω")
    st.sidebar.header("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±–∑–æ—Ä –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Youtube")
    selected_review = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–∑–æ—Ä", youtube_reviews[car_model], index=0)
    if st.sidebar.button("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Youtube"):
        try:
            webbrowser.open_new_tab(selected_review)
            st.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –æ–±–∑–æ—Ä –¥–ª—è {car_model}...")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏ {e}")
# –ö–æ–ª–æ–Ω–∫–∏
col1, col2 = st.columns([2, 1])

with col1:
    st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤")
    if not st.session_state.data.empty:
        styled_df = st.session_state.data.style.format({
            '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)': '{:.1f}',
            '–†–∞—Å—Ö–æ–¥ (–ª/100–∫–º)': '{:.1f}',
            '–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ (–≥—Ä–Ω/–ª)': '{:.1f}',
            '–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã (–≥—Ä–Ω)': '{:.2f}'
        }).set_properties(**{
            'background-color': '#3a3f44',
            'color': 'white',
            'border-color': '#ff4b4b',
            'border-radius': '8px',
            'padding': '10px'
        })
        st.dataframe(styled_df, use_container_width=True)

        if '–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã (–≥—Ä–Ω)' in st.session_state.data.columns:
            st.subheader("üìä –ì—Ä–∞—Ñ–∏–∫ –∑–∞—Ç—Ä–∞—Ç")
            fig_bar = go.Figure(data=[
                go.Bar(
                    x=st.session_state.data['–ú–æ–¥–µ–ª—å'],
                    y=st.session_state.data['–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã (–≥—Ä–Ω)'],
                    marker_color=['#ff4b4b', '#ff6f61', '#ff8a80'],
                    marker_line_color=['#d32f2f', '#e53935', '#ef5350'],
                    marker_line_width=2
                )
            ])
            fig_bar.update_layout(
                title="–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ç–æ–ø–ª–∏–≤–æ –ø–æ –º–æ–¥–µ–ª—è–º",
                xaxis_title="–ú–æ–¥–µ–ª—å",
                yaxis_title="–ó–∞—Ç—Ä–∞—Ç—ã (–≥—Ä–Ω)",
                template="plotly_dark",
                title_font_color='#ff4b4b',
                font_color="white",
                showlegend=False,
                yaxis=dict(range=[0, st.session_state.data['–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã (–≥—Ä–Ω)'].max() * 1.2]),
                transition={"duration": 200, "easing": "cubic-in-out"}
            )
            st.plotly_chart(fig_bar, use_container_width=True)

            st.subheader("üîÑ –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∑–∞—Ç—Ä–∞—Ç")
            fig_scatter = px.scatter(
                st.session_state.data,
                x='–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)',
                y='–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã (–≥—Ä–Ω)',
                color='–ú–æ–¥–µ–ª—å',
                size='–†–∞—Å—Ö–æ–¥ (–ª/100–∫–º)',
                title="–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∑–∞—Ç—Ä–∞—Ç –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è",
                animation_frame='–ú–æ–¥–µ–ª—å',
                range_y=[0, st.session_state.data['–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã (–≥—Ä–Ω)'].max() * 1.2],
                template="plotly_dark"
            )
            fig_scatter.update_layout(title_font_color="#ff4b4b", font_color="white")
            st.plotly_chart(fig_scatter, use_container_width=True)
        else:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å üöÄ'")
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–∞—Å—á–µ—Ç.")

with col2:
    st.subheader(" –í–∞—à —Å—É–ø–µ—Ä–∫–∞—Ä")
    image_path = car_images.get(car_model)
    car_image = load_car_image(image_path)
    if car_image:
        st.image(car_image, caption=f"{car_model}", use_container_width=True)
    else:
        st.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {car_model} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

st.markdown("""
### –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
1. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Premium Car –∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.
2. –ù–∞–∂–º–∏—Ç–µ **–†–∞—Å—Å—á–∏—Ç–∞—Ç—å** –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
3. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –∏ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞—Ç—Ä–∞—Ç –≤ –≥—Ä–∏–≤–Ω–∞—Ö.
""", unsafe_allow_html=True)

st.markdown("</div>", unsafe_allow_html=True)

if not st.session_state.authenticated:
    login_page()
else:
    main_page()
